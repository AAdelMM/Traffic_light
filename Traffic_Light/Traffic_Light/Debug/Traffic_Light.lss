
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d00  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000787  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000640  00000000  00000000  00001a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00002084  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044a  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000808  00000000  00000000  0000265e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002e66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  64:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <normalMode>:
		
		
	}
}
void pedestrainMode()
{
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	81 e4       	ldi	r24, 0x41	; 65
  70:	0e 94 ab 00 	call	0x156	; 0x156 <LED_init>
  74:	61 e0       	ldi	r22, 0x01	; 1
  76:	81 e4       	ldi	r24, 0x41	; 65
  78:	0e 94 ab 00 	call	0x156	; 0x156 <LED_init>
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 ab 00 	call	0x156	; 0x156 <LED_init>
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	82 e4       	ldi	r24, 0x42	; 66
  88:	0e 94 ab 00 	call	0x156	; 0x156 <LED_init>
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	82 e4       	ldi	r24, 0x42	; 66
  90:	0e 94 ab 00 	call	0x156	; 0x156 <LED_init>
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 ab 00 	call	0x156	; 0x156 <LED_init>
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	81 e4       	ldi	r24, 0x41	; 65
  a0:	0e 94 b2 00 	call	0x164	; 0x164 <LED_on>
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 b2 00 	call	0x164	; 0x164 <LED_on>
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <timer0Delay_ms>
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	81 e4       	ldi	r24, 0x41	; 65
  b8:	0e 94 b9 00 	call	0x172	; 0x172 <LED_off>
  bc:	62 e0       	ldi	r22, 0x02	; 2
  be:	82 e4       	ldi	r24, 0x42	; 66
  c0:	0e 94 b9 00 	call	0x172	; 0x172 <LED_off>
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	d0 e0       	ldi	r29, 0x00	; 0
  c8:	11 c0       	rjmp	.+34     	; 0xec <normalMode+0x80>
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	81 e4       	ldi	r24, 0x41	; 65
  ce:	0e 94 b2 00 	call	0x164	; 0x164 <LED_on>
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	82 e4       	ldi	r24, 0x42	; 66
  d6:	0e 94 b2 00 	call	0x164	; 0x164 <LED_on>
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	81 e4       	ldi	r24, 0x41	; 65
  de:	0e 94 b9 00 	call	0x172	; 0x172 <LED_off>
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	82 e4       	ldi	r24, 0x42	; 66
  e6:	0e 94 b9 00 	call	0x172	; 0x172 <LED_off>
  ea:	21 96       	adiw	r28, 0x01	; 1
  ec:	c5 30       	cpi	r28, 0x05	; 5
  ee:	d1 05       	cpc	r29, r1
  f0:	64 f3       	brlt	.-40     	; 0xca <normalMode+0x5e>
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	81 e4       	ldi	r24, 0x41	; 65
  f6:	0e 94 b9 00 	call	0x172	; 0x172 <LED_off>
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	82 e4       	ldi	r24, 0x42	; 66
  fe:	0e 94 b9 00 	call	0x172	; 0x172 <LED_off>
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	81 e4       	ldi	r24, 0x41	; 65
 106:	0e 94 b2 00 	call	0x164	; 0x164 <LED_on>
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	82 e4       	ldi	r24, 0x42	; 66
 10e:	0e 94 b2 00 	call	0x164	; 0x164 <LED_on>
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	81 e4       	ldi	r24, 0x41	; 65
 116:	0e 94 b9 00 	call	0x172	; 0x172 <LED_off>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	82 e4       	ldi	r24, 0x42	; 66
 11e:	0e 94 b9 00 	call	0x172	; 0x172 <LED_off>
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	11 c0       	rjmp	.+34     	; 0x14a <normalMode+0xde>
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	0e 94 b2 00 	call	0x164	; 0x164 <LED_on>
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	82 e4       	ldi	r24, 0x42	; 66
 134:	0e 94 b2 00 	call	0x164	; 0x164 <LED_on>
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	81 e4       	ldi	r24, 0x41	; 65
 13c:	0e 94 b9 00 	call	0x172	; 0x172 <LED_off>
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	82 e4       	ldi	r24, 0x42	; 66
 144:	0e 94 b9 00 	call	0x172	; 0x172 <LED_off>
 148:	21 96       	adiw	r28, 0x01	; 1
 14a:	c5 30       	cpi	r28, 0x05	; 5
 14c:	d1 05       	cpc	r29, r1
 14e:	64 f3       	brlt	.-40     	; 0x128 <normalMode+0xbc>
 150:	a5 cf       	rjmp	.-182    	; 0x9c <normalMode+0x30>

00000152 <appStart>:
	
}

 void appStart(void)
 {
	normalMode();
 152:	0e 94 36 00 	call	0x6c	; 0x6c <normalMode>

00000156 <LED_init>:
 */ 
 #include "led.h"
 

 void LED_init(uint8_t ledport,uint8_t ledpin)
 {
 156:	98 2f       	mov	r25, r24
 158:	86 2f       	mov	r24, r22
	DIO_init(ledpin,ledport,OUTPUT);
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	69 2f       	mov	r22, r25
 15e:	0e 94 c5 00 	call	0x18a	; 0x18a <DIO_init>
 162:	08 95       	ret

00000164 <LED_on>:
	
 }
 void LED_on(uint8_t ledport,uint8_t ledpin)
 {
 164:	98 2f       	mov	r25, r24
 166:	86 2f       	mov	r24, r22
	DIO_write(ledpin,ledport,HIGH);
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	69 2f       	mov	r22, r25
 16c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
 170:	08 95       	ret

00000172 <LED_off>:
 }
 void LED_off(uint8_t ledport,uint8_t ledpin)
 {
 172:	98 2f       	mov	r25, r24
 174:	86 2f       	mov	r24, r22
	DIO_write(ledpin,ledport,LOW);
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	69 2f       	mov	r22, r25
 17a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_write>
 17e:	08 95       	ret

00000180 <main>:
#include "Application/app.h"

int main(void)
{
	
	appStart();
 180:	0e 94 a9 00 	call	0x152	; 0x152 <appStart>

	return 0;
}
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	08 95       	ret

0000018a <DIO_init>:
//global variables
//functions definitions

void DIO_init(uint8_t pinnumber,uint8_t portnumber,uint8_t direction)
{
	switch(portnumber)
 18a:	62 34       	cpi	r22, 0x42	; 66
 18c:	59 f1       	breq	.+86     	; 0x1e4 <DIO_init+0x5a>
 18e:	18 f4       	brcc	.+6      	; 0x196 <DIO_init+0xc>
 190:	61 34       	cpi	r22, 0x41	; 65
 192:	41 f0       	breq	.+16     	; 0x1a4 <DIO_init+0x1a>
 194:	08 95       	ret
 196:	63 34       	cpi	r22, 0x43	; 67
 198:	09 f4       	brne	.+2      	; 0x19c <DIO_init+0x12>
 19a:	44 c0       	rjmp	.+136    	; 0x224 <DIO_init+0x9a>
 19c:	64 34       	cpi	r22, 0x44	; 68
 19e:	09 f4       	brne	.+2      	; 0x1a2 <DIO_init+0x18>
 1a0:	60 c0       	rjmp	.+192    	; 0x262 <DIO_init+0xd8>
 1a2:	08 95       	ret
	{
	  case PORT_A:
			if (direction == INPUT)
 1a4:	41 11       	cpse	r20, r1
 1a6:	0e c0       	rjmp	.+28     	; 0x1c4 <DIO_init+0x3a>
			{
				DDRA &= ~(1<<pinnumber);
 1a8:	4a b3       	in	r20, 0x1a	; 26
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	b9 01       	movw	r22, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_init+0x2c>
 1b2:	66 0f       	add	r22, r22
 1b4:	77 1f       	adc	r23, r23
 1b6:	8a 95       	dec	r24
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_init+0x28>
 1ba:	cb 01       	movw	r24, r22
 1bc:	80 95       	com	r24
 1be:	84 23       	and	r24, r20
 1c0:	8a bb       	out	0x1a, r24	; 26
 1c2:	08 95       	ret
			}
			else if(direction == OUTPUT)
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	09 f0       	breq	.+2      	; 0x1ca <DIO_init+0x40>
 1c8:	6a c0       	rjmp	.+212    	; 0x29e <DIO_init+0x114>
			{
				DDRA |= (1<<pinnumber);
 1ca:	4a b3       	in	r20, 0x1a	; 26
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	b9 01       	movw	r22, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_init+0x4e>
 1d4:	66 0f       	add	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_init+0x4a>
 1dc:	cb 01       	movw	r24, r22
 1de:	84 2b       	or	r24, r20
 1e0:	8a bb       	out	0x1a, r24	; 26
 1e2:	08 95       	ret
			{
				//return error handle
			}
	   break;
	   case PORT_B:
		   if (direction == INPUT)
 1e4:	41 11       	cpse	r20, r1
 1e6:	0e c0       	rjmp	.+28     	; 0x204 <DIO_init+0x7a>
		   {
			   DDRB &= ~(1<<pinnumber);
 1e8:	47 b3       	in	r20, 0x17	; 23
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	b9 01       	movw	r22, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_init+0x6c>
 1f2:	66 0f       	add	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	8a 95       	dec	r24
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_init+0x68>
 1fa:	cb 01       	movw	r24, r22
 1fc:	80 95       	com	r24
 1fe:	84 23       	and	r24, r20
 200:	87 bb       	out	0x17, r24	; 23
 202:	08 95       	ret
		   }
		   else if(direction == OUTPUT)
 204:	41 30       	cpi	r20, 0x01	; 1
 206:	09 f0       	breq	.+2      	; 0x20a <DIO_init+0x80>
 208:	4a c0       	rjmp	.+148    	; 0x29e <DIO_init+0x114>
		   {
			   DDRB |= (1<<pinnumber);
 20a:	47 b3       	in	r20, 0x17	; 23
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	b9 01       	movw	r22, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_init+0x8e>
 214:	66 0f       	add	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	8a 95       	dec	r24
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_init+0x8a>
 21c:	cb 01       	movw	r24, r22
 21e:	84 2b       	or	r24, r20
 220:	87 bb       	out	0x17, r24	; 23
 222:	08 95       	ret
		   {
			   //return error handle
		   }
	    break;
	    case PORT_C:
			if (direction == INPUT)
 224:	41 11       	cpse	r20, r1
 226:	0e c0       	rjmp	.+28     	; 0x244 <DIO_init+0xba>
			{
				DDRC &= ~(1<<pinnumber);
 228:	44 b3       	in	r20, 0x14	; 20
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	b9 01       	movw	r22, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_init+0xac>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	8a 95       	dec	r24
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_init+0xa8>
 23a:	cb 01       	movw	r24, r22
 23c:	80 95       	com	r24
 23e:	84 23       	and	r24, r20
 240:	84 bb       	out	0x14, r24	; 20
 242:	08 95       	ret
			}
			else if(direction == OUTPUT)
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	59 f5       	brne	.+86     	; 0x29e <DIO_init+0x114>
			{
				DDRC |= (1<<pinnumber);
 248:	44 b3       	in	r20, 0x14	; 20
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	b9 01       	movw	r22, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_init+0xcc>
 252:	66 0f       	add	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	8a 95       	dec	r24
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_init+0xc8>
 25a:	cb 01       	movw	r24, r22
 25c:	84 2b       	or	r24, r20
 25e:	84 bb       	out	0x14, r24	; 20
 260:	08 95       	ret
			{
				//return error handle
			}
	     break;
		 case PORT_D:
			 if (direction == INPUT)
 262:	41 11       	cpse	r20, r1
 264:	0e c0       	rjmp	.+28     	; 0x282 <DIO_init+0xf8>
			 {
				 DDRD &= ~(1<<pinnumber);
 266:	41 b3       	in	r20, 0x11	; 17
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	b9 01       	movw	r22, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_init+0xea>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	8a 95       	dec	r24
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_init+0xe6>
 278:	cb 01       	movw	r24, r22
 27a:	80 95       	com	r24
 27c:	84 23       	and	r24, r20
 27e:	81 bb       	out	0x11, r24	; 17
 280:	08 95       	ret
			 }
			 else if(direction == OUTPUT)
 282:	41 30       	cpi	r20, 0x01	; 1
 284:	61 f4       	brne	.+24     	; 0x29e <DIO_init+0x114>
			 {
				 DDRD |= (1<<pinnumber);
 286:	41 b3       	in	r20, 0x11	; 17
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	b9 01       	movw	r22, r18
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_init+0x10a>
 290:	66 0f       	add	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	8a 95       	dec	r24
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_init+0x106>
 298:	cb 01       	movw	r24, r22
 29a:	84 2b       	or	r24, r20
 29c:	81 bb       	out	0x11, r24	; 17
 29e:	08 95       	ret

000002a0 <DIO_write>:
	 }
	  
}
void DIO_write(uint8_t pinnumber,uint8_t portnumber,uint8_t value)
{
	switch(portnumber)
 2a0:	62 34       	cpi	r22, 0x42	; 66
 2a2:	59 f1       	breq	.+86     	; 0x2fa <DIO_write+0x5a>
 2a4:	18 f4       	brcc	.+6      	; 0x2ac <DIO_write+0xc>
 2a6:	61 34       	cpi	r22, 0x41	; 65
 2a8:	41 f0       	breq	.+16     	; 0x2ba <DIO_write+0x1a>
 2aa:	08 95       	ret
 2ac:	63 34       	cpi	r22, 0x43	; 67
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <DIO_write+0x12>
 2b0:	44 c0       	rjmp	.+136    	; 0x33a <DIO_write+0x9a>
 2b2:	64 34       	cpi	r22, 0x44	; 68
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <DIO_write+0x18>
 2b6:	60 c0       	rjmp	.+192    	; 0x378 <DIO_write+0xd8>
 2b8:	08 95       	ret
	{

	
	case PORT_A:
		if (value == LOW)
 2ba:	41 11       	cpse	r20, r1
 2bc:	0e c0       	rjmp	.+28     	; 0x2da <DIO_write+0x3a>
		{
			PORTA &= ~(1<<pinnumber);
 2be:	4b b3       	in	r20, 0x1b	; 27
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	b9 01       	movw	r22, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_write+0x2c>
 2c8:	66 0f       	add	r22, r22
 2ca:	77 1f       	adc	r23, r23
 2cc:	8a 95       	dec	r24
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_write+0x28>
 2d0:	cb 01       	movw	r24, r22
 2d2:	80 95       	com	r24
 2d4:	84 23       	and	r24, r20
 2d6:	8b bb       	out	0x1b, r24	; 27
 2d8:	08 95       	ret
		}
		else if(value == HIGH)
 2da:	41 30       	cpi	r20, 0x01	; 1
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <DIO_write+0x40>
 2de:	6a c0       	rjmp	.+212    	; 0x3b4 <DIO_write+0x114>
		{
			PORTA |= (1<<pinnumber);
 2e0:	4b b3       	in	r20, 0x1b	; 27
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	b9 01       	movw	r22, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_write+0x4e>
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	8a 95       	dec	r24
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_write+0x4a>
 2f2:	cb 01       	movw	r24, r22
 2f4:	84 2b       	or	r24, r20
 2f6:	8b bb       	out	0x1b, r24	; 27
 2f8:	08 95       	ret
		{
			//return error handle
		}
	break;
	case PORT_B:
		if (value == LOW)
 2fa:	41 11       	cpse	r20, r1
 2fc:	0e c0       	rjmp	.+28     	; 0x31a <DIO_write+0x7a>
		{
			PORTB &= ~(1<<pinnumber);
 2fe:	48 b3       	in	r20, 0x18	; 24
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	b9 01       	movw	r22, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_write+0x6c>
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	8a 95       	dec	r24
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_write+0x68>
 310:	cb 01       	movw	r24, r22
 312:	80 95       	com	r24
 314:	84 23       	and	r24, r20
 316:	88 bb       	out	0x18, r24	; 24
 318:	08 95       	ret
		}
		else if(value == HIGH)
 31a:	41 30       	cpi	r20, 0x01	; 1
 31c:	09 f0       	breq	.+2      	; 0x320 <DIO_write+0x80>
 31e:	4a c0       	rjmp	.+148    	; 0x3b4 <DIO_write+0x114>
		{
			PORTB |= (1<<pinnumber);
 320:	48 b3       	in	r20, 0x18	; 24
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	b9 01       	movw	r22, r18
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_write+0x8e>
 32a:	66 0f       	add	r22, r22
 32c:	77 1f       	adc	r23, r23
 32e:	8a 95       	dec	r24
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_write+0x8a>
 332:	cb 01       	movw	r24, r22
 334:	84 2b       	or	r24, r20
 336:	88 bb       	out	0x18, r24	; 24
 338:	08 95       	ret
		{
			//return error handle
		}
	break;
	case PORT_C:
		if (value == LOW)
 33a:	41 11       	cpse	r20, r1
 33c:	0e c0       	rjmp	.+28     	; 0x35a <DIO_write+0xba>
		{
			PORTC &= ~(1<<pinnumber);
 33e:	45 b3       	in	r20, 0x15	; 21
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	b9 01       	movw	r22, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_write+0xac>
 348:	66 0f       	add	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	8a 95       	dec	r24
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_write+0xa8>
 350:	cb 01       	movw	r24, r22
 352:	80 95       	com	r24
 354:	84 23       	and	r24, r20
 356:	85 bb       	out	0x15, r24	; 21
 358:	08 95       	ret
		}
		else if(value == HIGH)
 35a:	41 30       	cpi	r20, 0x01	; 1
 35c:	59 f5       	brne	.+86     	; 0x3b4 <DIO_write+0x114>
		{
			PORTC |= (1<<pinnumber);
 35e:	45 b3       	in	r20, 0x15	; 21
 360:	21 e0       	ldi	r18, 0x01	; 1
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	b9 01       	movw	r22, r18
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_write+0xcc>
 368:	66 0f       	add	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	8a 95       	dec	r24
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_write+0xc8>
 370:	cb 01       	movw	r24, r22
 372:	84 2b       	or	r24, r20
 374:	85 bb       	out	0x15, r24	; 21
 376:	08 95       	ret
		{
			//return error handle
		}
	break;
	case PORT_D:
		if (value == LOW)
 378:	41 11       	cpse	r20, r1
 37a:	0e c0       	rjmp	.+28     	; 0x398 <DIO_write+0xf8>
		{
			PORTD &= ~(1<<pinnumber); //write 0
 37c:	42 b3       	in	r20, 0x12	; 18
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	b9 01       	movw	r22, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_write+0xea>
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	8a 95       	dec	r24
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_write+0xe6>
 38e:	cb 01       	movw	r24, r22
 390:	80 95       	com	r24
 392:	84 23       	and	r24, r20
 394:	82 bb       	out	0x12, r24	; 18
 396:	08 95       	ret
		}
		else if(value == HIGH)
 398:	41 30       	cpi	r20, 0x01	; 1
 39a:	61 f4       	brne	.+24     	; 0x3b4 <DIO_write+0x114>
		{
			PORTD |= (1<<pinnumber); //write 1
 39c:	42 b3       	in	r20, 0x12	; 18
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	b9 01       	movw	r22, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_write+0x10a>
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	8a 95       	dec	r24
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_write+0x106>
 3ae:	cb 01       	movw	r24, r22
 3b0:	84 2b       	or	r24, r20
 3b2:	82 bb       	out	0x12, r24	; 18
 3b4:	08 95       	ret

000003b6 <timer0Stop>:
	TCCR0 |= (1<<0); //no prescaler
 }

 void timer0Stop()
 {
	TCCR0 = 0x00;
 3b6:	13 be       	out	0x33, r1	; 51
 3b8:	08 95       	ret

000003ba <timer0Delay_ms>:
 }

 void timer0Delay_ms(unsigned int delayTime)
 {
 3ba:	fc 01       	movw	r30, r24
	unsigned int overflowCounter=0;
	//unsigned int t = (3*delayTime);
	TCNT0=0x00;
 3bc:	12 be       	out	0x32, r1	; 50
	TCCR0 |= (1<<0);
 3be:	83 b7       	in	r24, 0x33	; 51
 3c0:	81 60       	ori	r24, 0x01	; 1
 3c2:	83 bf       	out	0x33, r24	; 51
	TCCR0 = 0x00;
 }

 void timer0Delay_ms(unsigned int delayTime)
 {
	unsigned int overflowCounter=0;
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	30 e0       	ldi	r19, 0x00	; 0
	//unsigned int t = (3*delayTime);
	TCNT0=0x00;
	TCCR0 |= (1<<0);
	 while(overflowCounter < (32500*delayTime))
 3c8:	08 c0       	rjmp	.+16     	; 0x3da <timer0Delay_ms+0x20>
	 {
		 //will repeat 2000 times
		 //stop after one over flow
		 //wait until the overflow flag to be set
		 while((TIFR &(1<<0)) == 0);
 3ca:	08 b6       	in	r0, 0x38	; 56
 3cc:	00 fe       	sbrs	r0, 0
 3ce:	fd cf       	rjmp	.-6      	; 0x3ca <timer0Delay_ms+0x10>

		 //clear overflow flag
		 TIFR &= ~(1<<0);
 3d0:	98 b7       	in	r25, 0x38	; 56
 3d2:	9e 7f       	andi	r25, 0xFE	; 254
 3d4:	98 bf       	out	0x38, r25	; 56

		 overflowCounter++;
 3d6:	2f 5f       	subi	r18, 0xFF	; 255
 3d8:	3f 4f       	sbci	r19, 0xFF	; 255
 {
	unsigned int overflowCounter=0;
	//unsigned int t = (3*delayTime);
	TCNT0=0x00;
	TCCR0 |= (1<<0);
	 while(overflowCounter < (32500*delayTime))
 3da:	64 ef       	ldi	r22, 0xF4	; 244
 3dc:	7e e7       	ldi	r23, 0x7E	; 126
 3de:	e6 9f       	mul	r30, r22
 3e0:	a0 01       	movw	r20, r0
 3e2:	e7 9f       	mul	r30, r23
 3e4:	50 0d       	add	r21, r0
 3e6:	f6 9f       	mul	r31, r22
 3e8:	50 0d       	add	r21, r0
 3ea:	11 24       	eor	r1, r1
 3ec:	24 17       	cp	r18, r20
 3ee:	35 07       	cpc	r19, r21
 3f0:	60 f3       	brcs	.-40     	; 0x3ca <timer0Delay_ms+0x10>
		 //clear overflow flag
		 TIFR &= ~(1<<0);

		 overflowCounter++;
	 }
	 timer0Stop();
 3f2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <timer0Stop>
 3f6:	08 95       	ret

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
